package main

import (
	"fmt"
)

var justString string

func someFunc() {
	// Отправляем большое число в функцию, которая создает строку, длинной, равной этому числу
	v := createHugeString(1 << 7)
	// Мы хотим записать в переменную полученную строку, и ожидаем, что там будет строка
	// в 100 символов
	justString = v[:100]
	// Однако оказывается, что ожидаемая строка потеряла последние байты
	fmt.Println("what string did we get:")
	fmt.Println(justString)
}

// Функция генерации строки
func createHugeString(i int) string {
	var str string
	for i != 0 {
		// Добавляем на каждой итерации буквы в кодировке utf-8
		// буквы латинского алфавита всегда равны 1-му байту, поэтому
		// строка гарантированно создастся длинной, равной 1 << 7
		str += "a"
		if i == 30 {
			// Однако, если мы захотим добавить, например смайлик, такая гарантия пропадет,
			// потому что у других сивмолов этой кодировки не всегда размер равен 1-му байту
			str += "☺"
		}
		i--
	}
	fmt.Println("what string do we expect to get:")
	fmt.Println(str)
	// Чтобы исправить ситуацию, можно пройти в цикле и посмотреть, на каком месте записывается
	// символ, выходящий за пределы таблицы ASCII
	// for _, r := range str {
	// 	fmt.Println(r)
	// }
	// Либо возвращать количество рун, которые получились во время создания строки,
	// чтобы не ошибиться. Зная, какой длины мы ожидаем строку, и получив количество
	// созданных рун, можно понять, что добавилось что-то лишнее

	fmt.Println(1 << 7)
	fmt.Println(len(str))

	return str
}

func main() {
	someFunc()
}
